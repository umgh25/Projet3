En résumé

    En tant que développeurs, nous sommes face à de nombreuses problématiques : l’évolutivité, les performances, etc.

    Spring Framework nous offre des solutions concrètes à ces problématiques :

        l’IoC container pour l’implémentation du pattern Dependency Injection ;

        la capacité de configurer plutôt que de développer ;

        des composants pour gérer une multitude d’aspects, comme par exemple interagir avec des bases de données, ou traiter des requêtes HTTP.

Laissez-moi maintenant vous présenter des composants de Spring Framework !



En résumé

    Spring Boot œuvre pour la simplification du développement de nos projets avec Spring Framework.

    La gestion des dépendances est simplifiée grâce aux starters qui regroupent plusieurs dépendances et homogénéisent les versions.

    L’autoconfiguration permet de se concentrer sur le code métier, et simplifie énormément la mise en œuvre des composants Spring qui sont utilisés.

    La gestion efficace des propriétés rend notre application configurable.

    Spring Boot Actuator permet de monitorer et gérer une application pendant son exécution.

    Le déploiement de l’application est facilité par la génération d’un JAR, et pour les projets web, un tomcat est embarqué.

La première partie touche déjà à sa fin ! Alors, qu'avez-vous retenu ? Découvrez-le en réalisant le quiz !



En résumé

    La première étape pour utiliser Spring Boot est de créer la structure minimale.

    On obtient la structure minimale en fournissant plusieurs informations, dont les starters de dépendances.

    Un projet Spring Boot peut être créé via Spring Initializr ou bien via Spring Tool Suite.

Nous avons parcouru la première étape : la création du projet. Avant de passer la deuxième étape, qui consiste à structurer et configurer le projet, laissez-moi faire un arrêt sur image : dans le prochain chapitre, nous allons analyser la structure minimale et découvrir pourquoi il est si important de structurer son projet. Allons-y !


    La structure minimale n’est pas suffisante, il faut l’enrichir.

    Les annotations sont un pilier au sein de Spring Boot pour tirer profit de l’IoC container.

    L’annotation @SpringBootApplication est la concaténation de plusieurs annotations, et son objectif est de déclencher toute la mécanique interne de Spring.

Vous savez désormais pourquoi il est important de structurer votre projet. Mais concrètement, comment s'y prendre ? C'est que nous allons voir dans le prochain chapitre.


    Je vous conseille de suivre les bonnes pratiques pour structurer vos packages, et de suivre un modèle en couches.

        En l’occurrence, nous avons opté pour 4 couches : Controller, Service, Repository et Model.

        L’approche en couches permet une meilleure évolution et une meilleure maintenabilité du code.

    Spring Boot a la très grande capacité de savoir lire des sources de propriétés, et le fichier applications.properties en est la démonstration. Pour configurer rapidement et efficacement votre application, ajoutez vos propriétés au fichier applications.properties.

    Au sein d’une application Spring Boot, écrire du code implique de définir les beans utilisés par Spring.

    On peut exécuter du code grâce à l’implémentation de l’interface CommandLineRunner et de la méthode run.

    Pour qu’une classe soit déclarée en tant que bean, on l’annote @Component.

    Pour qu’un bean soit injecté dans un attribut, on annote l’attribut @Autowired.


En résumé

    Spring Boot fournit une annotation @SpringBootTest qui permet de charger le contexte Spring lors de l’exécution des tests.

    Déployer une application Spring Boot est très facile, car l’artefact qui en résulte est un simple JAR où tout est embarqué.

    Il existe plusieurs méthodes pour exécuter notre application Spring Boot :

        Via l’IDE directement.

        Grâce à Maven et au goal spring-boot:run.

        En exécutant la commande java -jar.